import BitwardenSdk
import SwiftUI

/// A view containing the history of values generated by the generator.
///
struct GeneratorHistoryView: View {
    // MARK: Properties

    /// The `Store` for this view.
    @ObservedObject var store: Store<GeneratorHistoryState, GeneratorHistoryAction, GeneratorHistoryEffect>

    var body: some View {
        Group {
            if store.state.passwordHistory.isEmpty {
                emptyView()
            } else {
                passwordHistoryList()
            }
        }
        .background(Asset.Colors.backgroundSecondary.swiftUIColor.ignoresSafeArea())
        .navigationTitle(Localizations.passwordHistory)
        .toast(store.binding(
            get: \.toast,
            send: GeneratorHistoryAction.toastShown
        ))
        .toolbar {
            ToolbarItemGroup(placement: .navigationBarTrailing) {
                Menu {
                    AsyncButton {
                        await store.perform(.clearList)
                    } label: {
                        Text(Localizations.clear)
                    }
                } label: {
                    Image(asset: Asset.Images.verticalKabob, label: Text(Localizations.options))
                        .resizable()
                        .frame(width: 19, height: 19)
                        .foregroundColor(Asset.Colors.primaryBitwarden.swiftUIColor)
                }

                ToolbarButton(asset: Asset.Images.cancel, label: Localizations.close) {
                    store.send(.dismiss)
                }
            }
        }
        .task { await store.perform(.appeared) }
    }

    /// Returns a view for the empty state when no password history items exist.
    func emptyView() -> some View {
        GeometryReader { geometry in
            ScrollView {
                VStack(alignment: .center) {
                    Spacer()
                    Text(Localizations.noPasswordsToList)
                        .font(.body)
                        .foregroundColor(Asset.Colors.textPrimary.swiftUIColor)
                        .multilineTextAlignment(.center)
                        .padding(16)
                    Spacer()
                }
                .frame(maxWidth: .infinity, minHeight: geometry.size.height)
            }
        }
    }

    /// Returns a view for displaying the list of password history items.
    func passwordHistoryList() -> some View {
        ScrollView {
            VStack(spacing: 0) {
                ForEach(store.state.passwordHistory) { passwordHistory in
                    passwordHistoryRow(
                        passwordHistory,
                        hasDivider: passwordHistory != store.state.passwordHistory.last
                    )
                }
            }
            .background(Asset.Colors.backgroundPrimary.swiftUIColor)
            .cornerRadius(16)
            .padding(16)
        }
    }

    /// Return a view for a single row in the password history list.
    func passwordHistoryRow(_ passwordHistory: PasswordHistoryView, hasDivider: Bool) -> some View {
        HStack(spacing: 16) {
            VStack(alignment: .leading, spacing: 2) {
                PasswordText(password: passwordHistory.password, isPasswordVisible: true)

                Text(passwordHistory.lastUsedDate.formatted())
                    .font(.styleGuide(.subheadline))
                    .foregroundColor(Asset.Colors.textSecondary.swiftUIColor)
            }
            .padding(.vertical, 10)
            .frame(maxWidth: .infinity, alignment: .leading)

            Button {
                store.send(.copyPassword(passwordHistory))
            } label: {
                Image(asset: Asset.Images.copy)
                    .resizable()
                    .frame(width: 22, height: 22)
                    .foregroundColor(Asset.Colors.textSecondary.swiftUIColor)
            }
            .accessibilityLabel(Localizations.copyPassword)
        }
        .accessibilityElement(children: .combine)
        .accessibilityAction(named: Localizations.copyPassword) {
            store.send(.copyPassword(passwordHistory))
        }
        .padding(.horizontal, 16)
        .background(alignment: .bottom) {
            if hasDivider {
                Divider()
                    .padding(.leading, 16)
            }
        }
    }
}

// MARK: - PasswordHistoryView

extension PasswordHistoryView: Identifiable {
    public var id: UUID {
        UUID()
    }
}

// MARK: - Previews

struct GeneratorHistoryView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            GeneratorHistoryView(store: Store(processor: StateProcessor(
                state: GeneratorHistoryState(
                    passwordHistory: [
                        PasswordHistoryView(password: "8gr6uY8CLYQwzr#", lastUsedDate: Date()),
                        PasswordHistoryView(password: "%w4&D*48&CD&j2", lastUsedDate: Date()),
                        PasswordHistoryView(password: "df@58^%8o7e@&@", lastUsedDate: Date()),
                    ]
                )
            )))
        }
        .previewDisplayName("Password History")

        NavigationView {
            GeneratorHistoryView(store: Store(processor: StateProcessor(state: GeneratorHistoryState())))
        }
        .previewDisplayName("Empty")
    }
}
